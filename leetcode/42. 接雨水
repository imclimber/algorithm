
package main

import "log"

// 动态规划：直接得到height[i]的左右最高柱子的值
//func trap(height []int) int {
//	// 遍历数组，得到每个i的左边的元素最大值
//	leftMax := make([]int, len(height))
//	rightMax := make([]int, len(height))
//	leftMax[0] = height[0]
//	for i := 1; i < len(height); i++ {
//		leftMax[i] = max(leftMax[i-1], height[i])
//	}
//	// 遍历数组，得到每个i的右边的元素最大值
//	rightMax[len(height)-1] = height[len(height)-1]
//	for i := len(height) - 2; i >= 0; i-- {
//		rightMax[i] = max(rightMax[i+1], height[i])
//	}
//	// i对应的leftMax[i]和rightMax[i]中的最小值，减去height[i]就是i处的雨水
//	result := 0
//	for i, _ := range height {
//		k := min(leftMax[i], rightMax[i]) - height[i]
//		if k > 0 {
//			result += k
//		}
//	}
//	return result
//}
//
func max(i, j int) int {
	if i > j {
		return i
	}
	return j
}

func min(i, j int) int {
	if i > j {
		return j
	}
	return i
}

// 双指针法：关键在于理解height[left] < height[right]时左侧指针还未到达最高点（或者说left的右侧还有更高的柱子）
func trap(height []int) int {
	result := 0
	leftMax, rightMax := height[0], height[len(height)-1]
	left, right := 0, len(height)-1
	// 如果左指针left的值小于左侧最大（否则左侧无水），则有雨水存在
	// 关键在于理解：如果left还在移动，也就是满足height[left] < height[right]，就说明左边还没有到达最高的柱子，
	// 也就是说明左边的leftmax是左侧最高水位，left指针右侧的最高水位一定比左侧高（可能不是right指针的值），因此可以直接用leftmax减去left指针的值
	// 右侧的也是如此
	for left <= right {
		if height[left] < height[right] {
			leftMax = max(height[left], leftMax)
			k := leftMax - height[left]
			result += k

			left++
		} else {
			rightMax = max(height[right], rightMax)
			k := rightMax - height[right]
			result += k

			right--
		}
	}

	return result
}

func main_like() {
	height := []int{0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1}
	log.Println("result: ", trap(height))
}
