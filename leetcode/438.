
package main

import (
	"log"
)

// 方法一：暴力解法
func findAnagrams(s string, p string) []int {
	if len(p) > len(s) {
		return []int{}
	}
	plen := len(p)
	pmap := make(map[uint8]int)
	midmap := make(map[uint8]int)
	for i := 0; i < len(p); i++ {
		// 构造p的map
		pmap[p[i]]++
		//// 构造s的前len(p)长度的map（其实也可以不用提前构造midmap，判定起来更好写些）
		//midmap[s[i]]++
	}
	//log.Println("============before, midmap: ", midmap)
	i := 0
	//r := i + len(p) - 1（其实也可以不用提前构造midmap，判定起来更好写些）
	r := 0
	resultArray := make([]int, 0)
	for i = 0; i < len(s); i++ {
		{
			for ; r < i+plen && r < len(s); r++ {
				midmap[s[r]]++
			}
			//log.Println("midmap: ", midmap)
			// 如果r和i之间刚好是len(p)的长度，则比较子串
			res := compareMap(pmap, midmap)
			if res {
				resultArray = append(resultArray, i)
			}
			//log.Println("compareMap res: ", res)
		}
		// key的值等于1则删除，否则减一
		if value, _ := midmap[s[i]]; value == 1 {
			delete(midmap, s[i])
		} else {
			midmap[s[i]]--
		}
	}
	return resultArray
}

// 比较两个map是否相等，返回true表示相等
func compareMap(pmap, midmap map[uint8]int) bool {
	for pkey, pvalue := range pmap {
		if midvalue, ok := midmap[pkey]; !ok || pvalue != midvalue {
			return false
		}
	}
	for midkey, midvalue := range midmap {
		if pvalue, ok := pmap[midkey]; !ok || midvalue != pvalue {
			return false
		}
	}
	return true
}

func main_like() {
	s1 := "cbaebabacd"
	p1 := "abc"
	res1 := findAnagrams(s1, p1)
	log.Println("res1: ", res1)
	s2 := "abab"
	p2 := "ab"
	res2 := findAnagrams(s2, p2)
	log.Println("res2: ", res2)
	s3 := "acdcaeccde"
	p3 := "c"
	res3 := findAnagrams(s3, p3)
	log.Println("res3: ", res3)
}
